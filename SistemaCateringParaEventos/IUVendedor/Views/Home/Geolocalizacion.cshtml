@{
    ViewBag.Title = "Mapa de Eventos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<ol class="breadcrumb mb-4 mt-2">
    <li class="breadcrumb-item"><a href="/Home/Index">Dashboard</a></li>
    <li class="breadcrumb-item active">Geolocalización</li>
</ol>


<h4 class="mb-3">📍 Eventos Geolocalizados</h4>
<div class="input-group mb-4" style="max-width: 400px;">
    <span class="input-group-text bg-white border-end-0" style="border-radius: 8px 0 0 8px;">
        <i class="fas fa-hashtag text-secondary"></i>
    </span>
    <input type="number" id="buscadorEventoId"
           class="form-control border-start-0 shadow-sm"
           placeholder="Buscar evento por ID"
           min="0"
           style="border-radius: 0 8px 8px 0; appearance: textfield;" />
</div>


<div class="container mt-4">

    <div id="mapaEventos" style="height: 500px; border-radius: 8px; overflow: hidden;"></div>
</div>

@section Scripts {
    <script>
        let map;
        let marcadores = [];

        async function cargarEventosEnMapa() {
            map = L.map("mapaEventos").setView([-34.6, -58.4], 10);

            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                attribution: "&copy; OpenStreetMap contributors"
            }).addTo(map);

            try {
                const response = await fetch("/Home/ListarEventosPorUbicacion");
                const data = await response.json();

                for (const evento of data.data) {
                    const direccion = `${evento.Ubicacion.Calle} ${evento.Ubicacion.Altura}, ${evento.Ubicacion.Ciudad}, ${evento.Ubicacion.Provincia}, Argentina`;
                    const nominatimUrl = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(direccion)}&format=json`;

                    const resGeo = await fetch(nominatimUrl);
                    const geoData = await resGeo.json();

                    if (geoData.length > 0) {
                        const lat = parseFloat(geoData[0].lat);
                        const lon = parseFloat(geoData[0].lon);

                        const marker = L.marker([lat, lon]).addTo(map);
                        marker.bindPopup(`
                                <strong>${evento.Nombre}</strong><br />
                                ${evento.Ubicacion.Calle} ${evento.Ubicacion.Altura}<br />
                                ${evento.Ubicacion.Ciudad}, ${evento.Ubicacion.Provincia}
                            `);

                        marcadores.push({
                            id: evento.IdEvento,
                            marker: marker
                        });
                    }
                }
            } catch (error) {
                return 0;
            }
        }

        $(document).ready(function () {
            cargarEventosEnMapa();

            $("#buscadorEventoId").on("input", function () {
                const filtroId = parseInt($(this).val());

                const coincidencia = marcadores.find(e => e.id === filtroId);

                if (coincidencia) {
                    const latlng = coincidencia.marker.getLatLng();
                    map.setView(latlng, 14);
                    coincidencia.marker.openPopup();
                }
            });
        });
    </script>
}
